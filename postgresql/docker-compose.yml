version: '3'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: raspiska_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_postgres_password}
      POSTGRES_DB: postgres
      APP_USER_PASSWORD: ${APP_USER_PASSWORD:-secure_app_password}
      MONITORING_PASSWORD: ${MONITORING_PASSWORD:-secure_monitoring_password}
      REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-secure_replication_password}
      ENABLE_REPLICATION: ${ENABLE_REPLICATION:-false}
      ENABLE_BACKUPS: ${ENABLE_BACKUPS:-true}
      PGDATA: /var/lib/postgresql/data/pgdata
      TZ: Europe/Istanbul
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./config/postgresql.conf:/var/lib/postgresql/data/pgdata/postgresql.conf
      - ./config/pg_hba.conf:/var/lib/postgresql/data/pgdata/pg_hba.conf
      - ./scripts:/var/lib/postgresql/scripts
      - ./backups:/var/lib/postgresql/backups
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres_network
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.postgres.rule=HostSNI(`postgres.raspiska.local`)"
      - "traefik.tcp.routers.postgres.entrypoints=postgres"
      - "traefik.tcp.routers.postgres.service=postgres"
      - "traefik.tcp.services.postgres.loadbalancer.server.port=5432"

  # PgBouncer - Connection Pooling
  pgbouncer:
    image: bitnami/pgbouncer:latest
    container_name: raspiska_pgbouncer
    restart: unless-stopped
    environment:
      POSTGRESQL_HOST: postgres
      POSTGRESQL_PORT: 5432
      POSTGRESQL_USERNAME: postgres
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD:-secure_postgres_password}
      PGBOUNCER_PORT: 6432
      PGBOUNCER_MAX_CLIENT_CONN: 1000
      PGBOUNCER_DEFAULT_POOL_SIZE: 20
      PGBOUNCER_POOL_MODE: transaction
      PGBOUNCER_ADMIN_USERS: postgres
    ports:
      - "6432:6432"
    depends_on:
      - postgres
    networks:
      - postgres_network
      - traefik_network
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "6432"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PgAdmin - PostgreSQL Administration
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: raspiska_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@raspiska.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-secure_pgadmin_password}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: "True"
      PGADMIN_CONFIG_LOGIN_BANNER: "Authorized users only. All activities may be monitored and reported."
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 10
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - postgres
    networks:
      - postgres_network
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.raspiska.local`)"
      - "traefik.http.routers.pgadmin.entrypoints=web"
      - "traefik.http.services.pgadmin.loadbalancer.server.port=80"
      - "traefik.http.routers.pgadmin.middlewares=secure-headers@file"

volumes:
  postgres_data:
    name: raspiska_postgres_data
  pgadmin_data:
    name: raspiska_pgadmin_data

networks:
  postgres_network:
    name: raspiska_postgres_network
  traefik_network:
    external: true
    name: raspiska_traefik_network
