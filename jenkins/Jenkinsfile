pipeline {
    agent {
        label 'docker'
    }
    
    environment {
        DOCKER_REGISTRY = 'registry.raspiska.local'
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Build') {
            steps {
                sh '''
                cd docker-images
                for service in */; do
                    if [ -f "${service}docker-compose.yml" ]; then
                        echo "Building ${service%/}..."
                        cd ${service}
                        docker-compose build
                        cd ..
                    fi
                done
                '''
            }
        }
        
        stage('Test') {
            steps {
                sh '''
                cd docker-images
                # Test Traefik
                if [ -d "traefik" ]; then
                    echo "Testing Traefik..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:8280 | grep 200 || echo "Traefik dashboard not accessible"
                fi
                
                # Test Redis
                if [ -d "redis" ]; then
                    echo "Testing Redis..."
                    docker exec -i raspiska_redis redis-cli -a "${REDIS_PASSWORD}" PING | grep PONG || echo "Redis not responding"
                fi
                
                # Test Valkey
                if [ -d "valkey" ]; then
                    echo "Testing Valkey..."
                    docker exec -i raspiska_valkey valkey-cli -a "${VALKEY_PASSWORD}" PING | grep PONG || echo "Valkey not responding"
                fi
                
                # Test Kong
                if [ -d "kong" ]; then
                    echo "Testing Kong..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:8001 | grep 200 || echo "Kong Admin API not accessible"
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:8000 | grep 200 || echo "Kong Proxy not accessible"
                fi
                
                # Test PostgreSQL
                if [ -d "postgresql" ]; then
                    echo "Testing PostgreSQL..."
                    docker exec -i raspiska_postgres pg_isready -U postgres || echo "PostgreSQL not ready"
                fi
                
                # Test Monitoring Stack
                if [ -d "monitoring" ]; then
                    echo "Testing Monitoring Stack..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:9090 | grep 200 || echo "Prometheus not accessible"
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 | grep 200 || echo "Grafana not accessible"
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:9093 | grep 200 || echo "Alertmanager not accessible"
                fi
                
                # Test Uptime Kuma
                if [ -d "uptime-kuma" ]; then
                    echo "Testing Uptime Kuma..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:3001 | grep 200 || echo "Uptime Kuma not accessible"
                fi
                
                # Test Jenkins
                if [ -d "jenkins" ]; then
                    echo "Testing Jenkins..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:8181/jenkins | grep 200 || echo "Jenkins not accessible"
                fi
                
                # Test n8n
                if [ -d "n8n" ]; then
                    echo "Testing n8n..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:5678 | grep 200 || echo "n8n not accessible"
                fi
                
                # Test Keycloak
                if [ -d "keycloak" ]; then
                    echo "Testing Keycloak..."
                    curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/auth | grep 200 || echo "Keycloak not accessible"
                fi
                '''
            }
        }
        
        stage('Deploy to Development') {
            when {
                branch 'develop'
            }
            steps {
                sh '''
                cd docker-images
                for service in */; do
                    if [ -f "${service}setup.sh" ]; then
                        echo "Deploying ${service%/} to development..."
                        cd ${service}
                        ./setup.sh
                        cd ..
                    fi
                done
                '''
            }
        }
        
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Deploy to production?', ok: 'Yes'
                sh '''
                cd docker-images
                for service in */; do
                    if [ -f "${service}setup.sh" ]; then
                        echo "Deploying ${service%/} to production..."
                        cd ${service}
                        ./setup.sh
                        cd ..
                    fi
                done
                '''
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
